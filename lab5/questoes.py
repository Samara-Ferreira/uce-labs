'''
Escreva uma fun√ß√£o que receba dois n√∫meros e retorne verdadeiro (True) ou falso (False)
indicando se o primeiro n√∫mero √© divis√≠vel pelo segundo. O programa principal deve imprimir
‚ÄúDIVIS√çVEL‚Äù ou ‚Äúnop‚Äù dependendo do retorno da fun√ß√£o. O programa deve prosseguir a
verifica√ß√£o at√© que o usu√°rio digite 0 para o segundo n√∫mero.
'''
def divisivel(a: int, b: int) -> bool:
    if b == 0:
        return False
    return a % b == 0

def exe1():
    x = int(input("Digite o primeiro n√∫mero (ou 0 para sair): "))
    y = int(input("Digite o segundo n√∫mero (ou 0 para sair): "))
    while y != 0:
        if divisivel(x, y):
            print("DIVIS√çVEL")
        else:
            print("nop")
        x = int(input("Digite o primeiro n√∫mero (ou 0 para sair): "))
        y = int(input("Digite o segundo n√∫mero (ou 0 para sair): "))

'''
Escreva uma fun√ß√£o que receba como par√¢metro o √¢ngulo que uma linha faz com o eixo
positivo X e determina e retorna o quadrante em que essa linha reside. A determina√ß√£o do
quadrante √© dada atrav√©s da seguinte tabela:
√Çngulo com o eixo positivo X Quadrante
Entre 0 e 90 graus 1
Entre 90 e 180 graus 2
Entre 180 e 270 graus 3
Entre 270 e 360 graus 4
Se o √¢ngulo for exatamente 0, 90, 180, ou 270 graus, a linha correspondente n√£o reside em
nenhum quadrante, mas fica em cima de um eixo. Para esta situa√ß√£o, sua fun√ß√£o deve retornar
5 para eixo horizontal e 6 para eixo vertical. Um √¢ngulo fora do intervalo entre 0 e 360 deve
resultar no retorno do valor ‚Äì1. A fun√ß√£o principal deve imprimir o n√∫mero do quadrante, ‚Äúeixo
vertical‚Äù ou ‚Äúeixo horizontal‚Äù, ou ainda ‚Äúnot an angle, man!‚Äù dependendo do valor retornado pela
fun√ß√£o.

'''

def quadrante(x: float) -> int:
    if x < 0 or x > 360:
        return -1
    elif x == 0 or x == 180 or x == 360:
        return 5
    elif x == 90 or x == 270:
        return 6
    elif 0 < x < 90:
        return 1
    elif 90 < x < 180:
        return 2
    elif 180 < x < 270:
        return 3
    return 4

def exe2():
    angulo = float(input("Digite o √¢ngulo (0-360): "))
    q = quadrante(angulo)
    if q == -1:
        print("not an angle, man!")
    elif q == 5:
        print("eixo horizontal")
    elif q == 6:
        print("eixo vertical")
    else:
        print(f"Quadrante: {q}")


'''
Fa√ßa uma fun√ß√£o que dado um n√∫mero n, retorne o n-√©simo n√∫mero de Fibonacci. O n√∫mero
de fibonacci √© dado por ùëÅ . O programa deve imprimir o
0 = 0, ùëÅ
1 = 1, ùëÅ
ùëñ = ùëÅ
ùëñ‚àí1 + ùëÅ
ùëñ‚àí2
'''
def fibonacci(n: int) -> int:
    if n < 0:
        return -1
    elif n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
        '''
        a, b = 0, 1
        for _ in range(2, n + 1):
            temp = b
            b = a + b
            a = temp
        return b
        '''
    
def exe3():
    num: int = int(input("Digite um n√∫mero inteiro n√£o negativo: "))
    fib: int = fibonacci(num)
    if fib == -1:
        print("N√∫mero inv√°lido")
    else:
        print(f"O {num}¬∫ n√∫mero de Fibonacci √©: {fib}")

'''
Soma dos pares do intervalo
Escreva um programa que contenha uma fun√ß√£o que receba dois valores inteiros n1 e n2, e
retorne a soma de todos os valores pares entre n1 e n2 (inclusive ambos, se for o caso). A
fun√ß√£o principal deve imprimir o resultado obtido e prosseguir enquanto n1 < n2.
'''
def soma_pares(n1: int, n2: int) -> int:
    soma = 0
    for i in range(n1, n2 + 1):
        if i % 2 == 0:
            soma += i
    return soma

def exe4():
    n1: int = int(input("Digite o primeiro n√∫mero (n1): "))
    n2: int = int(input("Digite o segundo n√∫mero (n2): "))
    while n1 < n2:
        resultado: int = soma_pares(n1, n2)
        print(f"A soma dos pares entre {n1} e {n2} √©: {resultado}")
        n1 = int(input("Digite o primeiro n√∫mero (n1): "))
        n2 = int(input("Digite o segundo n√∫mero (n2): "))

'''
Escreva um programa que contenha um procedimento que recebe como par√¢metro um n√∫mero
inteiro, calcule e retorne a soma de todos os algarismos deste n√∫mero. O programa deve
imprimir o resultado e prosseguir enquanto o n√∫mero informado pelo usu√°rio for diferente de
zero.
'''

def soma_algarismos(n: int) -> int:
    soma = 0
    n = abs(n)  # Considera o valor absoluto para lidar com n√∫meros negativos
    while n > 0:
        soma += n % 10
        n //= 10
    return soma

def exe5():
    numero: int = int(input("Digite um n√∫mero inteiro (ou 0 para sair): "))
    while numero != 0:
        resultado: int = soma_algarismos(numero)
        print(f"A soma dos algarismos de {numero} √©: {resultado}")
        numero = int(input("Digite um n√∫mero inteiro (ou 0 para sair): "))


'''
Escreva um programa que receba 3 n√∫meros inteiros e os retorne em ordem crescente ‚Äì sem
usar a fun√ß√£o sort. A fun√ß√£o principal deve imprimir o resultado na tela em uma √∫nica linha.
'''

def ordena_crescente(a: int, b: int, c: int) -> tuple[int, int, int]:
    if a > b:
        a, b = b, a
    if a > c:
        a, c = c, a
    if b > c:
        b, c = c, b
    return a, b, c

def exe6():
    a = int(input("Digite o primeiro n√∫mero inteiro: "))
    b = int(input("Digite o segundo n√∫mero inteiro: "))
    c = int(input("Digite o terceiro n√∫mero inteiro: "))

    a, b, c = ordena_crescente(a, b, c)
    print(f"N√∫meros em ordem crescente: {a} {b} {c}")

'''
Escreva um programa que receba 3 n√∫meros reais, correspondentes aos comprimentos de tr√™s
segmentos, e chame uma fun√ß√£o que receba estes valores como par√¢metros.
Esta fun√ß√£o deve retornar ‚Äún√£o √© um tri√¢ngulo‚Äù, caso os valores dos segmentos informados n√£o
constituam um tri√¢ngulo. Caso constituam um tri√¢ngulo, chame outra fun√ß√£o que retorne a
classifica√ß√£o angular do tri√¢ngulo, que pode ser: "acutangulo", "ret√¢ngulo" ou "obtusangulo". A
fun√ß√£o principal deve imprimir o valor retornado e prosseguir enquanto os 3 valores informados
forem positivos.
'''
def tipo_triangulo(a: float, b: float, c: float) -> str:
    if a + b <= c or a + c <= b or b + c <= a:
        return "n√£o √© um tri√¢ngulo"
    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:
        return "ret√¢ngulo"
    if a**2 + b**2 < c**2 or a**2 + c**2 < b**2 or b**2 + c**2 < a**2:
        return "obtusangulo"
    return "acutangulo"

def exe7():
    a = float(input("Digite o comprimento do primeiro segmento: "))
    b = float(input("Digite o comprimento do segundo segmento: "))
    c = float(input("Digite o comprimento do terceiro segmento: "))

    while a > 0 and b > 0 and c > 0:
        resultado = tipo_triangulo(a, b, c)
        print(f"Classifica√ß√£o do tri√¢ngulo: {resultado}")
        a = float(input("Digite o comprimento do primeiro segmento: "))
        b = float(input("Digite o comprimento do segundo segmento: "))
        c = float(input("Digite o comprimento do terceiro segmento: "))

'''
Crie uma fun√ß√£o que receba um n√∫mero inteiro n√£o negativo n e retorne o seu fatorial (n!). O
fatorial de um n√∫mero √© o produto de todos os inteiros de 1 at√© o pr√≥prio n√∫mero
(5!=5√ó4√ó3√ó2√ó1). Lembre-se que o fatorial de 0 √© 1 (0!=1). O programa principal deve continuar
pedindo n√∫meros e imprimindo seus fatoriais at√© que um n√∫mero negativo seja inserido.
'''

def fatorial_legal(n: int) -> int:
    if n == 0:
        return 1
    else:
        return n * fatorial_legal(n - 1)
    
def fatorial_iterativo(n: int) -> int:
    if n == 0:
        return 1
    resultado = 1
    for i in range(2, n + 1):
        resultado *= i
    return resultado

def exe8():
    numero: int = int(input("Digite um n√∫mero inteiro n√£o negativo (ou negativo para sair): "))
    while numero >= 0:
        resultado: int = fatorial_legal(numero)
        print(f"O fatorial de {numero} √©: {resultado}")
        numero = int(input("Digite um n√∫mero inteiro n√£o negativo (ou negativo para sair): "))

'''
Desenvolva uma fun√ß√£o que receba um n√∫mero inteiro como par√¢metro e retorne True se o
n√∫mero for primo e False caso contr√°rio. Um n√∫mero primo √© aquele que √© divis√≠vel apenas por
1 e por ele mesmo. O programa principal deve ler um n√∫mero, chamar a fun√ß√£o e exibir uma
mensagem indicando se o n√∫mero √© primo ou n√£o. O programa deve parar quando o usu√°rio
digitar 0.
'''

def eh_primo(n: int) -> bool:
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def exe9():
    numero: int = int(input("Digite um n√∫mero inteiro (ou 0 para sair): "))
    while numero != 0:
        if eh_primo(numero):
            print(f"{numero} √© primo")
        else:
            print(f"{numero} n√£o √© primo")
        numero = int(input("Digite um n√∫mero inteiro (ou 0 para sair): "))

'''
Fa√ßa uma fun√ß√£o que receba dois n√∫meros inteiros como par√¢metros: a base e o expoente. A
fun√ß√£o deve calcular e retornar o resultado da base elevada ao expoente (sem usar o operador
de pot√™ncia ** ou a fun√ß√£o pow()). O programa principal deve ler a base e o expoente, chamar
a fun√ß√£o e imprimir o resultado. O processo se repete at√© que o valor 0 seja digitado para a
base.
'''

def potencia(base: int, expoente: int) -> int:
    resultado = 1
    for _ in range(expoente):
        resultado *= base
    return resultado

def exe10():
    while True:
        base = int(input("Digite a base (ou 0 para sair): "))
        if base == 0:
            break
        expoente = int(input("Digite o expoente: "))
        resultado = potencia(base, expoente)
        print(f"{base} elevado a {expoente} √©: {resultado}")


if __name__ == "__main__":
    exercicio: str = input("Qual exerc√≠cio voc√™ quer executar? ")

    while exercicio != "0":
        if exercicio == "1":
            exe1()
        elif exercicio == "2":
            exe2()
        elif exercicio == "3":
            exe3()
        elif exercicio == "4":
            exe4()
        elif exercicio == "5":
            exe5()
        elif exercicio == "6":
            exe6()
        elif exercicio == "7":
            exe7()
        elif exercicio == "8":
            exe8()
        elif exercicio == "9":
            exe9()
        elif exercicio == "10":
            exe10()
        else:
            print("Exerc√≠cio inv√°lido")
        exercicio = input("Qual exerc√≠cio voc√™ quer executar? ")
